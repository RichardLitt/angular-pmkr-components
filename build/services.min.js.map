{"version":3,"file":"services.min.js","sources":["services.js","debounce\\debounce.js","filterStabilize\\filterStabilize.js"],"names":[],"mappings":"AAAA,QAAA,OAAA,4BACA,gBACA,yBCFA,QAAA,OAAA,oBAEA,QAAA,iBACA,WACA,KACA,SAAA,EAAA,GAYA,QAAA,GAAA,EAAA,GAIA,QAAA,KAEA,GAAA,GAAA,EAAA,QAEA,EAAA,KACA,EAAA,SAQA,OANA,GAAA,OAAA,GAEA,EAAA,EAAA,WACA,EAAA,QAAA,EAAA,MAAA,EAAA,KACA,GAEA,EAAA,QAfA,GAAA,EAmBA,OAAA,GAIA,QAAA,GAAA,EAAA,GAIA,QAAA,KAEA,GAAA,GAAA,EAAA,QAEA,EAAA,KACA,EAAA,SAYA,OAVA,IACA,EAAA,QAAA,EAAA,MAAA,EAAA,IAIA,EAAA,OAAA,GACA,EAAA,EAAA,WACA,EAAA,MACA,GAEA,EAAA,QAnBA,GAAA,EAuBA,OAAA,GAIA,QAAA,GAAA,GAIA,QAAA,KAEA,GAAA,GAAA,EAAA,KAAA,UAAA,WAEA,EAAA,EAAA,OAYA,OAVA,GAAA,MAAA,KAAA,WAAA,KAAA,SAAA,GACA,IAAA,GACA,EAAA,QAAA,IAEA,SAAA,GACA,IAAA,GACA,EAAA,OAAA,KAIA,EAAA,QAlBA,GAAA,EAsBA,OAAA,GAxFA,GAAA,GAAA,WACA,MAAA,GAAA,MAAA,KAAA,WA2FA,OAzFA,GAAA,UAAA,WACA,MAAA,GAAA,MAAA,KAAA,YAEA,EAAA,OAAA,WACA,MAAA,GAAA,MAAA,KAAA,YAqFA,KCnGA,QAAA,OAAA,2BAEA,QAAA,wBACA,WAEA,GAAA,MAEA,EAAA,SAAA,EAAA,GAGA,GAAA,GAAA,WAIA,IAAA,GADA,MACA,EAAA,EAAA,EAAA,UAAA,SAAA,EACA,EAAA,KAAA,UAAA,GAGA,IAAA,GAAA,EAAA,EAEA,KAAA,EAAA,MAAA,EAEA,GAAA,GAAA,EAAA,MAEA,IAAA,GAAA,KAAA,UAAA,GACA,EAAA,EAAA,GAAA,EACA,IAAA,EACA,MAAA,EAIA,GAAA,GAAA,QAAA,KAAA,EAIA,IAAA,GAAA,EAAA,MAAA,KAAA,IAAA,EAAA,EAMA,OAHA,GAAA,GAAA,GAAA,EAGA,EAKA,OAAA,GAIA,OAAA","sourcesContent":["angular.module('pmkr.components.services', [\r\n  'pmkr.debounce',\r\n  'pmkr.filterStabilize'\r\n]);","angular.module('pmkr.debounce', [])\r\n\r\n.factory('pmkr.debounce', [\r\n  '$timeout',\r\n  '$q',\r\n  function($timeout, $q) {\r\n\r\n    var service = function() {\r\n      return debounceFactory.apply(this, arguments);\r\n    };\r\n    service.immediate = function() {\r\n      return debounceImmediateFactory.apply(this, arguments);\r\n    };\r\n    service.latest = function() {\r\n      return debounceLatestFactory.apply(this, arguments);\r\n    };\r\n\r\n    function debounceFactory(fn, wait) {\r\n\r\n      var timeoutPromise;\r\n\r\n      function debounced() {\r\n\r\n        var deferred = $q.defer();\r\n\r\n        var context = this;\r\n        var args = arguments;\r\n\r\n        $timeout.cancel(timeoutPromise);\r\n\r\n        timeoutPromise = $timeout(function() {\r\n          deferred.resolve(fn.apply(context, args));\r\n        }, wait);\r\n\r\n        return deferred.promise;\r\n\r\n      }\r\n\r\n      return debounced;\r\n\r\n    }\r\n\r\n    function debounceImmediateFactory(fn, wait) {\r\n\r\n      var timeoutPromise;\r\n\r\n      function debounced() {\r\n\r\n        var deferred = $q.defer();\r\n\r\n        var context = this;\r\n        var args = arguments;\r\n\r\n        if (!timeoutPromise) {\r\n          deferred.resolve(fn.apply(context, args));\r\n          // return here?\r\n        }\r\n\r\n        $timeout.cancel(timeoutPromise);\r\n        timeoutPromise = $timeout(function() {\r\n          timeoutPromise = null;\r\n        }, wait);\r\n\r\n        return deferred.promise;\r\n\r\n      }\r\n\r\n      return debounced;\r\n\r\n    }\r\n\r\n    function debounceLatestFactory(fn) {\r\n\r\n      var latestArgs;\r\n\r\n      function debounced() {\r\n\r\n        var args = latestArgs = JSON.stringify(arguments);\r\n\r\n        var deferred = $q.defer();\r\n\r\n        fn.apply(this, arguments).then(function(res) {\r\n          if (latestArgs === args) {\r\n            deferred.resolve(res);\r\n          }\r\n        }, function(res) {\r\n          if (latestArgs === args) {\r\n            deferred.reject(res);\r\n          }\r\n        });\r\n\r\n        return deferred.promise;\r\n\r\n      }\r\n\r\n      return debounced;\r\n\r\n    }\r\n\r\n    return service;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.filterStabilize', [])\r\n\r\n.factory('pmkr.filterStabilize', [\r\n  function() {\r\n\r\n    var cache = {};\r\n\r\n    var service = function(filterName, filterFn) {\r\n\r\n      // create a stabilized filter that calls the passed in filterFn\r\n      var filter = function() {\r\n\r\n        // copy arguments to new array as to not modify arguments object\r\n        var args = [];\r\n        for (var i=0; i<arguments.length; ++i) {\r\n          args.push(arguments[i]);\r\n        }\r\n\r\n        var input = args[0];\r\n\r\n        if (!input) { return input; }\r\n\r\n        cache[filterName] = cache[filterName] || {};\r\n\r\n        var key = JSON.stringify(args);\r\n        var fromCache = cache[filterName][key];\r\n        if (fromCache) {\r\n          return fromCache;\r\n        }\r\n\r\n        // replace input with copy - never modify input\r\n        args[0] = angular.copy(input);\r\n\r\n        // filtered = filterFn's return value, or the input copy if no return value\r\n        // filterFn can return new data or modify the original (returning original is optional)\r\n        var filtered = filterFn.apply(this, args) || args[0];\r\n\r\n        // cache result according to all arguments - allows unique identifier to be passed in\r\n        cache[filterName][key] = filtered;\r\n\r\n        // return the new or copied filtered input\r\n        return filtered;\r\n\r\n      };\r\n\r\n      // return the stabilized filter\r\n      return filter;\r\n\r\n    }; // end service function\r\n\r\n    return service;\r\n\r\n  }\r\n])\r\n\r\n;"],"sourceRoot":"/source/"}